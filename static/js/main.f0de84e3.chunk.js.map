{"version":3,"sources":["components/PostcodeSearchBar.tsx","components/DoorNumberSearchBar.tsx","components/AddressListItem.tsx","components/AddressList.tsx","api/fetchAddresses.ts","components/CollectionListItem.tsx","components/CollectionList.tsx","api/fetchCollections.ts","App.tsx","utils/index.ts","reportWebVitals.ts","index.tsx"],"names":["PostcodeSearchBar","props","onChange","htmlFor","id","event","target","value","DoorNumberSearchBar","AddressListItem","onClick","SiteShortAddress","addressData","AddressList","addressList","doorNumber","setUprn","setSeletedAddress","map","includes","AccountSiteUprn","fetchAddresses","postcode","a","fetch","response","json","data","Addresses","collectionData","Service","Date","CollectionList","collectionList","index","CollectionListItem","fetchCollections","uprn","Collections","App","useState","setPostcode","setDoorNumber","selectedAddress","setSelectedAddress","setAddressList","collections","setCollections","useEffect","getAddresses","addressesResult","undefined","postcodeString","replace","test","isPostcodeValid","getCollections","collectionResult","className","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0de84e3.chunk.js","sourcesContent":["import react from \"react\";\n\ninterface IProps {\n  onChange: (text: string) => void;\n}\n\nconst PostcodeSearchBar = (props: IProps) => {\n  const { onChange } = props;\n\n  const handleTextChange = (event: react.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"postcode-search-bar\">Postcode:</label>\n      <input id=\"postcode-search-bar\" onChange={handleTextChange} />\n    </div>\n  );\n};\n\nexport default PostcodeSearchBar;\n","import react from 'react';\n\ninterface IProps {\n  onChange: (string: string) => void;\n}\n\nconst DoorNumberSearchBar = (props: IProps) => {\n  const {onChange} = props;\n\n  const handleTextChange = (event: react.ChangeEvent<HTMLInputElement>) => {\n    \n    onChange(event.target.value);\n  }\n\n  return (\n    <div>\n      <label htmlFor=\"door-number-search-bar\">Door Number:</label>\n      <input id=\"door-number-search-bar\" onChange={handleTextChange}/>\n    </div>\n  )\n}\n\nexport default DoorNumberSearchBar;","interface IProps {\n  addressData: any;\n  onClick: () => void;\n}\n\nconst AddressListItem = (props: IProps) => {\n  const { onClick } = props;\n  const { SiteShortAddress } = props.addressData;\n\n  return <button onClick={onClick}>{SiteShortAddress}</button>;\n};\n\nexport default AddressListItem;\n","import React from \"react\";\nimport { Address } from \"../types\";\nimport AddressListItem from \"./AddressListItem\";\n\ninterface IProps {\n  addressList: any[];\n  doorNumber: string;\n  setUprn: (uprn: string) => void;\n  setSeletedAddress: (seletedAddress: Address) => void;\n}\n\nconst AddressList = (props: IProps) => {\n  const { addressList, doorNumber, setUprn, setSeletedAddress } = props;\n\n  return (\n    <div>\n      {addressList.map((addressData) => {\n        if (addressData.SiteShortAddress?.includes(doorNumber)) {\n          return (\n            <AddressListItem\n              addressData={addressData}\n              onClick={() => {\n                setUprn(addressData.AccountSiteUprn);\n                setSeletedAddress(addressData);\n              }}\n              key={addressData.AccountSiteUprn}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n};\n\nexport default AddressList;\n","import { addresses } from \"./dummyData\";\nimport {Address} from '../types';\n\ninterface AddressesResponse {\n  Addresses: Address[];\n}\n\nconst debug = false;\n\nconst fetchAddresses = async (postcode: string) => {\n  if (debug) {\n    return addresses.Addresses;\n  }\n\n  const response = await fetch(\n    \"https://api.reading.gov.uk/rbc/getaddresses/\" + postcode\n  );\n  const data: AddressesResponse = await response.json();\n\n  if (\"Addresses\" in data && data.Addresses !== null) {\n    return data.Addresses;\n  }\n\n  return [];\n};\n\nexport default fetchAddresses;\n","import React from \"react\";\n\ninterface IProps {\n  collectionData: any;\n}\n\nconst AddressListItem = (props: IProps) => {\n  const { Service, Date } = props.collectionData;\n\n  return (\n    <div>\n      <p>{Service}</p>\n      <p>{Date}</p>\n    </div>\n  );\n};\n\nexport default AddressListItem;\n","import React from \"react\";\nimport AddressListItem from \"./AddressListItem\";\nimport CollectionListItem from \"./CollectionListItem\";\n\ninterface IProps {\n  collectionList: any[];\n}\n\nconst CollectionList = (props: IProps) => {\n  const { collectionList } = props;\n\n  return (\n    <div>\n      {collectionList.map((collectionData, index) => {\n        return (\n          <CollectionListItem\n            collectionData={collectionData}\n            key={index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CollectionList;\n","import { collections } from \"./dummyData\";\nimport {Collection} from '../types';\n\ninterface CollectionsResponse {\n  Collections: Collection[];\n}\n\nconst debug = false;\n\n// uprn: Unique Property Reference Number\nconst fetchCollections = async (uprn: string) => {\n  if (debug) {\n    return collections.Collections;\n  }\n\n  const response = await fetch(\n    \"https://api.reading.gov.uk/rbc/mycollections/\" + uprn\n  );\n  const data: CollectionsResponse = await response.json();\n\n  if (\"Collections\" in data && data.Collections !== null) {\n    return data.Collections;\n  }\n\n  return [];\n};\n\nexport default fetchCollections;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PostcodeSearchBar from \"./components/PostcodeSearchBar\";\nimport DoorNumberSearchBar from \"./components/DoorNumberSearchBar\";\nimport AddressList from \"./components/AddressList\";\nimport fetchAddresses from \"./api/fetchAddresses\";\nimport { isPostcodeValid } from \"./utils\";\nimport CollectionList from \"./components/CollectionList\";\nimport fetchCollections from \"./api/fetchCollections\";\nimport { Address } from \"./types\";\n\nfunction App() {\n  const [postcode, setPostcode] = useState<string>(\"\");\n  const [doorNumber, setDoorNumber] = useState<string>(\"\");\n  const [uprn, setUprn] = useState<string>();\n  const [selectedAddress, setSelectedAddress] = useState<Address>();\n  const [addressList, setAddressList] = useState<any[]>([]);\n  const [collections, setCollections] = useState<any[]>([]);\n\n  useEffect(() => {\n    const getAddresses = async () => {\n      const addressesResult = await fetchAddresses(postcode);\n\n      setAddressList(addressesResult);\n    };\n\n    setDoorNumber(\"\");\n    setUprn(undefined);\n    setSelectedAddress(undefined);\n    setAddressList([]);\n    setCollections([]);\n    if (isPostcodeValid(postcode)) {\n      getAddresses();\n    }\n\n    return () => {};\n  }, [postcode]);\n\n  useEffect(() => {\n    setCollections([]);\n  }, [doorNumber]);\n\n  useEffect(() => {\n    if (uprn === undefined) {\n      return;\n    }\n\n    const getCollections = async () => {\n      const collectionResult = await fetchCollections(uprn);\n\n      setCollections(collectionResult);\n    };\n\n    setCollections([]);\n    getCollections();\n  }, [uprn]);\n\n  return (\n    <div className=\"App\">\n      <PostcodeSearchBar onChange={setPostcode} />\n      <DoorNumberSearchBar onChange={setDoorNumber} />\n      {selectedAddress && (\n        <p>\n          <b>Address: </b>\n          {selectedAddress.SiteShortAddress}\n        </p>\n      )}\n      {collections.length === 0 ? (\n        <AddressList\n          addressList={addressList}\n          doorNumber={doorNumber}\n          setUprn={setUprn}\n          setSeletedAddress={setSelectedAddress}\n        />\n      ) : (\n        <CollectionList collectionList={collections} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const isPostcodeValid = (postcode: string) => {\n  let postcodeString = postcode.replace(/\\s/g, \"\");\n\n  return /^[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}$/i.test(postcodeString);\n};\n\nexport { isPostcodeValid };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}